#1341. Movie Rating

#NOTE 1: YEAR and MONTH and DAY can help us get the exact year/month/day that we want. 


(
    SELECT u.name AS results
    FROM Users u 
    JOIN MovieRating mr
        ON u.user_id = mr.user_id
    GROUP BY u.user_id
    ORDER BY COUNT(*) DESC, u.name
    LIMIT 1
) 

UNION ALL

(
    SELECT m.title AS results
    FROM Movies m 
    JOIN MovieRating mr
        ON m.movie_id = mr.movie_id
    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2
    GROUP BY m.movie_id
    ORDER BY AVG(mr.rating) DESC, m.title
    LIMIT 1
)
;



#1321. Restaurant Growth
#NOTE: CTE is so useful and it helps to make things easier to understand.
#And nee to break big task into smaller pieces.
#SUM window function OVER() is something new just learnt.

-- Step 1: Get total amount spent each day
WITH daily_amounts AS (
    SELECT 
        visited_on,
        SUM(amount) as daily_total
    FROM Customer
    GROUP BY visited_on
),

-- Step 2: Calculate 7-day moving totals
moving_totals AS (
    SELECT 
        visited_on,
        SUM(daily_total) OVER (
            ORDER BY visited_on 
            ROWS 6 PRECEDING
        ) as amount
    FROM daily_amounts
)

-- Step 3: Get final results (only from day 7 onwards)
SELECT 
    visited_on,
    amount,
    ROUND(amount / 7.0, 2) as average_amount
FROM moving_totals
WHERE visited_on >= (
    SELECT DATE_ADD(MIN(visited_on), INTERVAL 6 DAY)
    FROM daily_amounts
)
ORDER BY visited_on;
