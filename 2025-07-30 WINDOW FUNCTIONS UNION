#610. Triangle Judgement

#NOTE 1: There is another solution using IF
# IF(x + y > z AND x + z > y AND y + z > x, 'Yes', 'No')
SELECT x,y,z,
    CASE 
        WHEN x + y > z AND x + z > y AND y + z > x THEN 'Yes' ELSE 'No' 
    END AS triangle
FROM Triangle
;


#180. Consecutive Numbers

#NOTE 1: LAG and LEAD can be used to see the rows before and after.
#NOTE 2: We can add columns inside FROM for us to do more comparisons betweens columns.

SELECT DISTINCT num AS ConsecutiveNums
FROM(
      SELECT num,
          LAG(num, 1) OVER(ORDER BY id) AS prev1,
          LAG(num, 2) OVER(ORDER BY id) AS prev2
      FROM Logs
  ) p
WHERE num = prev1 AND num = prev2
;


#1164. Product Price at a Given Date

#NOTE 1: UNION is a function to add two tables together but the columns should be the same.
#NOTE 2: ROW_NUMBER function can create a new column and we can the new column rn. 
#ROW_NUMBER looks like GROUP BY but I think it is stronger than GROUP BY.

SELECT product_id,
    new_price AS price
FROM (
    SELECT *,
        ROW_NUMBER() OVER(
            PARTITION BY product_id
            ORDER BY change_date DESC
        ) AS rn
    FROM Products
    WHERE change_date <= '2019-08-16'
) new_table
WHERE rn = 1

UNION

SELECT DISTINCT product_id, 10 AS price
FROM Products
WHERE product_id NOT IN(
    SELECT product_id
    FROM Products
    WHERE change_date <= '2019-08-16'
)
;



#1204. Last Person to Fit in the Bus

#NOTE 1: CTE can help us avoid layers in layers.
#NOTE 2: SUM() OVER() is a window function.

WITH cte AS(
    SELECT *,
    SUM(weight) OVER(ORDER BY turn) AS total_weight
    FROM Queue
)

SELECT person_name
FROM cte
WHERE total_weight <= 1000
ORDER BY total_weight DESC
LIMIT 1
;



#1907. Count Salary Categories

#NOTE 1: UNION ALL can connect all rows automatically inlcuding duplicates.

SELECT 'Low Salary' AS category,
    COUNT(CASE WHEN income < 20000 THEN 1 END) AS accounts_count
FROM Accounts

UNION ALL

SELECT 'Average Salary' AS category,
    COUNT(CASE WHEN income >= 20000 AND income <= 50000 THEN 1 END)
FROM Accounts

UNION ALL

SELECT 'High Salary' AS category,
    COUNT(CASE WHEN income > 50000 THEN 1 END)
FROM Accounts
;



#1978. Employees Whose Manager Left the Company

SELECT employee_id
FROM Employees
WHERE salary < 30000 AND
    manager_id NOT IN(
        SELECT employee_id
        FROM Employees
    )
ORDER BY employee_id ASC
;
